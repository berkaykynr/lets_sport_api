// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String  @id @unique @default(cuid())
  first_name        String
  last_name         String
  username          String  @unique
  password          String
  email             String  @unique
  phone             String? @unique
  address           String?
  branches          Json?
  sex               String?
  profile_photo     String?
  photos            String?
  rate              Int?    @default(0)
  birthyear         String?
  resetPasswordCode String?
  is_validated      Boolean @default(false)
  is_premium        Boolean @default(false)
  events            Event[]

  conversations    Conversation[]
  sentMessages     Message[]      @relation("sender")
  receivedMessages Message[]      @relation("receiver")
  sessions         Session[]
}

model TurkeyAddress {
  id   String @id @unique @default(cuid())
  city Json?
}

enum Branches {
  Football
  Volleyball
  Basketball
  Handball
  Fitness
  Athletics
  Judo
  Swimming
  Wrestling
  Taekwondo
  Tennis
  Karate
  Archery
  Boxing
  Badminton
  Yoga
  MuayThai
  Fencing
  Aikido
  Trekkig
}

model Event {
  id           String    @id @unique @default(cuid())
  eventDate    DateTime
  updatedAt    DateTime? @updatedAt
  createdAt    DateTime? @default(now())
  participants Json?
  owner        User      @relation(fields: [username], references: [id])
  latitude     String
  longitude    String
  address      String
  branch       String
  description  String?
  username     String
}

model Conversation {
  id         String    @id @default(cuid())
  name       String?
  senderId   String
  receiverId String
  users      User[]
  messages   Message[]
  createdAt  DateTime  @default(now())
}

model Message {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  text           String?
  image          String?
  sender         User         @relation(name: "sender", fields: [senderId], references: [id])
  senderId       String
  receiver       User         @relation(name: "receiver", fields: [receiverId], references: [id])
  receiverId     String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  seen           Boolean
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
